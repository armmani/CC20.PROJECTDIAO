generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      Role     @default(VET)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status   @default(ACTIVE)

  visits            Visit[]
  ownersCreated     Owner[]           @relation("OwnerCreatedBy")
  ownersUpdated     Owner[]           @relation("OwnerUpdatedBy")
  petsCreated       Pet[]             @relation("PetCreatedBy")
  petsUpdated       Pet[]             @relation("PetUpdatedBy")
  medsCreated       Medication[]      @relation("MedCreatedBy")
  medsUpdated       Medication[]      @relation("MedUpdatedBy")
  procsCreated      Procedure[]       @relation("ProcCreatedBy")
  procsUpdated      Procedure[]       @relation("ProcUpdatedBy")
  visitCreated      Visit[]           @relation("VisitCreatedBy")
  visitUpdated      Visit[]           @relation("VisitUpdatedBy")
  visitMedication   VisitMedication[]
  visitProcedure    VisitProcedure[]
  visitMedsUpdated  VisitMedication[] @relation("VisitMedUpdatedBy")
  visitProcsUpdated VisitProcedure[]  @relation("VisitProcUpdatedBy")
}

enum Role {
  ADMIN
  VET
}

model Visit {
  id               Int               @id @default(autoincrement())
  cc               String
  hx               String
  pe               String
  weight           Float
  dx               String
  cost             Decimal           @db.Decimal(10, 2)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User?             @relation(fields: [userId], references: [id])
  userId           Int?
  createdById      Int
  creator          User?             @relation("VisitCreatedBy", fields: [createdById], references: [id])
  updatedById      Int?
  updater          User?             @relation("VisitUpdatedBy", fields: [updatedById], references: [id])
  visitmedications VisitMedication[]
  visitprocedures  VisitProcedure[]
  pet              Pet?              @relation(fields: [petId], references: [id])
  petId            Int?
}

model Pet {
  id            Int      @id @default(autoincrement())
  pet_name      String
  species       Species
  breed         String
  gender        Gender
  sterilization Boolean  @default(false)
  birth_date    DateTime
  status        Status   @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   Int
  creator       User     @relation("PetCreatedBy", fields: [createdById], references: [id])
  updatedById   Int?
  updater       User?    @relation("PetUpdatedBy", fields: [updatedById], references: [id])
  visits        Visit[]
  owner         Owner    @relation(fields: [ownerId], references: [id])
  ownerId       Int
}

enum Species {
  CANINE
  FELINE
  EXOTIC
  OTHERS
}

enum Gender {
  MALE
  FEMALE
}

enum Status {
  ACTIVE
  INACTIVE
}

model Owner {
  id          Int      @id @default(autoincrement())
  owner_name  String
  tel_number  String
  line_id     String?
  address     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int
  creator     User     @relation("OwnerCreatedBy", fields: [createdById], references: [id])
  updatedById Int?
  updater     User?    @relation("OwnerUpdatedBy", fields: [updatedById], references: [id])
  pets        Pet[]
}

model VisitMedication {
  id           Int         @id @default(autoincrement())
  dosage       String
  frequency    Frequency
  quantity     Decimal     @db.Decimal(10, 2)
  notes        String
  cost         Decimal     @db.Decimal(10, 2)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdById  Int
  creator      User        @relation(fields: [createdById], references: [id])
  visit        Visit?      @relation(fields: [visitId], references: [id])
  visitId      Int?
  medication   Medication? @relation(fields: [medicationId], references: [id])
  medicationId Int?
  updatedById  Int?
  updater      User?       @relation("VisitMedUpdatedBy", fields: [updatedById], references: [id])
}

enum Frequency {
  SID
  BID
  TID
  QID
  Q2H
  Q4H
  Q6H
  Q8H
  Q12H
  ONCE
}

model Medication {
  id          Int               @id @default(autoincrement())
  name        String
  type        MedType
  unit        String
  cost        Decimal           @db.Decimal(10, 2)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdById Int
  creator     User              @relation("MedCreatedBy", fields: [createdById], references: [id])
  updatedById Int?
  updater     User?             @relation("MedUpdatedBy", fields: [updatedById], references: [id])
  medications VisitMedication[]
}

enum MedType {
  TX
  RX
}

model VisitProcedure {
  id          Int        @id @default(autoincrement())
  quantity    Int
  unit        String
  notes       String
  cost        Decimal    @db.Decimal(10, 2)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById Int
  creator     User       @relation(fields: [createdById], references: [id])
  visit       Visit?     @relation(fields: [visitId], references: [id])
  visitId     Int?
  procedure   Procedure? @relation(fields: [procedureId], references: [id])
  procedureId Int?
  updatedById Int?
  updater     User?      @relation("VisitProcUpdatedBy", fields: [updatedById], references: [id])
}

model Procedure {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  cost        Decimal          @db.Decimal(10, 2)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdById Int
  creator     User             @relation("ProcCreatedBy", fields: [createdById], references: [id])
  updatedById Int?
  updater     User?            @relation("ProcUpdatedBy", fields: [updatedById], references: [id])
  procedures  VisitProcedure[]
}
